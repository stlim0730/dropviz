<script src='/node_modules/d3/d3.min.js'></script>
<script src='/node_modules/c3/c3.min.js'></script>

<style shim-shadowdom>
  path {
    stroke: black;
    width:1;
    fill:none;    
  }

  #chart {
    margin-top: 50px;
    margin-right: 150px;
    min-height: 600px;
  }

  #chart > svg > g {
    min-height: 500px;
  }

  .c3-chart-lines
  {
      fill: none;
      stroke: #000;
  }
</style>


        <div id = "chart">
            
        </div>
        <script>

        function render_simple_chart(div, cols, type) {
            if (type=='gauge') {
                // TODO: data aggregation
                chart = c3.generate({
                    bindto: div,
                    data: {
                        columns: cols,
                        type: type
                    }
                });
            }
            else {
                chart = c3.generate({
                    bindto: div,
                    data: {
                        columns: cols,
                        type: type
                    }
                });
            }
        }

        function uncheckGraphColumns(column_name) {
            var deleteIndex = -1;
            for (var i = 0; i < tempData.length; i++) {
                if (tempData[i][0] == column_name) {
                    deleteIndex = i;
                    break;
                }
            }

            if (deleteIndex < 0) return;

            chart.unload({
              ids: [tempData[deleteIndex][0]]
            });

            tempData.splice(deleteIndex, 1);
            console.log(tempData);
        }

        function checkGraphColumns(column_name) {
            var selected = -1;
            for (var i = 0; i < mat.length; i++) {
                if (mat[i][0] == column_name) {
                    selected = i;
                    break;
                }
            }

            if (selected < 0) return;
            
            tempData.splice(selected, 0, mat[selected])
            console.log(tempData);
            chart.load({columns: tempData});
        }

        function updateGraphType(charttype) {
            var col_names = [];
            for (var i=0; i<tempData.length;i++) {
                col_names.push(tempData[i][0]);
            }
            console.log(tempData);

            if (charttype.indexOf("combination") > -1){
                // var types = ['line','scatter','step','spline'];
                // var dataToTypes = {};
                // for (var n = 0; n < col_names.length; n++) {
                //     if (n > types.length) {
                //         break;
                //     }
                //     dataToTypes[col_names[n]] = types[n];
                // }

                // chart = render_chart('#chart', tempData, null, dataToTypes);
            }
            else if (charttype.indexOf("stacked") > -1){
                // render_chart('#chart', tempData, 'bar', null, [names]);
            }
            else {
                chart = null;
                render_simple_chart('#chart', tempData, charttype);
            }
        }

        function json2array(obj){
            var matrix = new Array();

            for(var i=0; i<metadata.col_num; i++) {
                matrix.push(new Array());
                matrix[i].push(metadata.col_names[i]);
            }

            for(var i=0; i<matrix.length;i++) {
                key = matrix[i][0];
                for(var j=0; j<obj.length; j++) {
                    var row = obj[j];
                    matrix[i].push(row[key]);
                }
            }

            return matrix;
        }

        // function Unupdate(){
        //     var chart = c3.generate({
        //     bindto: '#chart',
        //     data: {
        //       columns: mat
        //     }
        // });
        // }

        var mat = json2array(data);
        var tempData = JSON.parse(JSON.stringify(mat));
        var chart = null;
        render_simple_chart('#chart', tempData, 'line');

        </script>
